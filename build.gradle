plugins {
    id 'java'
    //id 'com.github.johnrengelman.shadow' version '1.2.3'
    id 'idea'
    id "me.champeau.gradle.jmh" version "0.4.7"
}

idea {
    project {
        ext.jdkName = '1.8'
        ext.languageLevel = '1.8'
    }
}

sourceCompatibility=JavaVersion.VERSION_1_8
targetCompatibility=JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
    mavenLocal()
    //maven { url "http://m2.neo4j.org/content/repositories/releases/" }
    maven { url "https://raw.github.com/neo4j-contrib/m2/master/releases" }
}

ext {
    neo4jVersion = "3.4.5"
//    neo4jClientVersion = "1.6.2"
}

dependencies {
    compile group: 'org.neo4j', name: 'neo4j-kernel', version: neo4jVersion
    compile group: 'org.neo4j', name: 'neo4j-lucene-index', version: neo4jVersion

//    compile group: 'org.neo4j', name: 'server-api', version: neo4jVersion
//    compile "org.slf4j:slf4j-api:1.7.20"
//    compile group: 'org.neo4j.app', name: 'neo4j-server', version: neo4jVersion

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.neo4j.test', name: 'neo4j-harness', version: neo4jVersion
//    testCompile "org.neo4j.driver:neo4j-java-driver:$neo4jClientVersion"

    jmh group: 'org.neo4j', name: 'neo4j-kernel', version: neo4jVersion, classifier: "tests"

}

version = "0.1"
group = "org.neo4j.asyncaction"

/*shadowJar {
  dependencies {
    include(dependency('org.codehaus.groovy:groovy-all'))
    include(dependency('org.ccil.cowan.tagsoup:tagsoup'))
  }
}*/

test {
    systemProperties 'user.language': 'en', 'user.country': 'US'
    testLogging {
        exceptionFormat = 'full'
    }
}

jmh {
//    include = ['some regular expression'] // include pattern (regular expression) for benchmarks to be executed
//    exclude = ['some regular expression'] // exclude pattern (regular expression) for benchmarks to be executed
            iterations = 2 // Number of measurement iterations to do.
            benchmarkMode = ['ss']
//    benchmarkMode = ['thrpt','ss'] // Benchmark mode. Available modes are: [Throughput/thrpt, AverageTime/avgt, SampleTime/sample, SingleShotTime/ss, All/all]
//    batchSize = 1 // Batch size: number of benchmark method calls per operation. (some benchmark modes can ignore this setting)
            fork = 1 // How many times to forks a single benchmark. Use 0 to disable forking altogether
    failOnError = true // Should JMH fail immediately if any benchmark had experienced the unrecoverable error?
//    forceGC = false // Should JMH force GC between iterations?
//    jvm = 'myjvm' // Custom JVM to use when forking.
//    jvmArgs = ['Custom JVM args to use when forking.']
//    jvmArgsAppend = ['Custom JVM args to use when forking (append these)']
//    jvmArgsPrepend =[ 'Custom JVM args to use when forking (prepend these)']
//    humanOutputFile = project.file("${project.buildDir}/reports/jmh/human.txt") // human-readable output file
//    resultsFile = project.file("${project.buildDir}/reports/jmh/results.txt") // results file
//    operationsPerInvocation = 10 // Operations per invocation.
//    benchmarkParameters =  [:] // Benchmark parameters.
//    profilers = [] // Use profilers to collect additional data. Supported profilers: [cl, comp, gc, stack, perf, perfnorm, perfasm, xperf, xperfasm, hs_cl, hs_comp, hs_gc, hs_rt, hs_thr]
//    timeOnIteration = '1s' // Time to spend at each measurement iteration.
//    resultFormat = 'CSV' // Result format type (one of CSV, JSON, NONE, SCSV, TEXT)
//    synchronizeIterations = false // Synchronize iterations?
//    threads = 4 // Number of worker threads to run with.
//    threadGroups = [2,3,4] //Override thread group distribution for asymmetric benchmarks.
//    timeout = '1s' // Timeout for benchmark iteration.
//    timeUnit = 'ms' // Output time unit. Available time units are: [m, s, ms, us, ns].
//    verbosity = 'NORMAL' // Verbosity mode. Available modes are: [SILENT, NORMAL, EXTRA]
//    warmup = '1s' // Time to spend at each warmup iteration.
//    warmupBatchSize = 2 // Warmup batch size: number of benchmark method calls per operation.
            warmupForks = 1 // How many warmup forks to make for a single benchmark. 0 to disable warmup forks.
            warmupIterations = 1 // Number of warmup iterations to do.
//    warmupMode = 'INDI' // Warmup mode for warming up selected benchmarks. Warmup modes are: [INDI, BULK, BULK_INDI].
//    warmupBenchmarks = ['.*Warmup'] // Warmup benchmarks to include in the run in addition to already selected. JMH will not measure these benchmarks, but only use them for the warmup.
            zip64 = true // Use ZIP64 format for bigger archives
//    jmhVersion = '1.15' // Specifies JMH version
//    includeTests = true // Allows to include test sources into generate JMH jar, i.e. use it when benchmarks depend on the test classes.
//    duplicateClassesStrategy = 'fail' // Strategy to apply when encountring duplicate classes during creation of the fat jar (i.e. while executing jmhJar task)
        }
